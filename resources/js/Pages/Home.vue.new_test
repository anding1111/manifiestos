<template>
  <v-app>
    <v-main>
      <!-- Barra superior con opciones -->
      <v-menu location="bottom" origin="top right" transition="slide-y-transition">
        <template v-slot:activator="{ props }">
          <v-btn
            icon
            variant="elevated"
            size="large"
            v-bind="props"
            class="floating-user-btn"
          >
            <v-icon size="x-large">mdi-account-circle</v-icon>
          </v-btn>
        </template>
        <v-list>
          <v-list-item @click="openProfileModal" hover>
            <v-list-item-title>
              <v-icon start>mdi-account-edit</v-icon>
              Perfil
            </v-list-item-title>
          </v-list-item>
          <v-list-item @click="openPasswordChangeModal" hover>
            <v-list-item-title>
              <v-icon start>mdi-lock-reset</v-icon>
              Cambiar Contraseña
            </v-list-item-title>
          </v-list-item>
          <v-list-item @click="logout" hover>
            <v-list-item-title>
              <v-icon start>mdi-logout</v-icon>
              Cerrar Sesión
            </v-list-item-title>
          </v-list-item>
        </v-list>
      </v-menu>
      <!-- Tarjeta de búsqueda -->
      <v-container :class="{'d-flex justify-center align-center': true, 'fill-height': !Object.keys(results).length}">
        <v-card class="pa-5" elevation="3" max-width="600">
          <v-card-title color="primary" class="text-2xl font-bold mb-4 text-center">Consultar IMEIs</v-card-title>
          <v-form @submit.prevent="submit" class="d-flex flex-column align-center">
            <v-text-field
              v-model="imeis"
              label="IMEIs (separados por comas)"
              class="mb-4 mx-auto"
              width="100%"
              type="text"
              color="deep-purple-accent-4"
              :error-messages="errors.imeis"
              @keypress.enter.prevent="replaceEnterWithComma"
              @input="cleanInput"
              required
            ></v-text-field>
            <v-btn type="submit" color="deep-purple-accent-4" width="50vh" class="mt-4">Consultar</v-btn>
          </v-form>
        </v-card>
      </v-container>
  
      <!-- Contenedor de resultados -->
      <v-container fluid class="mt-4 results-container">
        <v-row>
          <v-col
            v-for="(fileResults, fileName) in results"
            :key="fileName"
            cols="12"
            sm="6"
            md="4"
            lg="3"
          >
            <v-card :class="{'not-found': fileName === 'N/A'}" class="mb-4 result-card" :data-card="fileName">
              <v-card-title class="headline">Archivo: {{ fileName }}</v-card-title>
              <v-card-text>
                <div v-if="fileResults.length">
                  <strong>IMEIs:</strong> {{ fileResults.map(result => result.imei).join(', ') }}
                </div>
                <v-btn
                  v-if="fileName !== 'N/A'"
                  @click="highlightImei(fileResults)"
                  :color="loadingFile === fileName ? 'primary' : successFile === fileName ? 'green' : 'orange-accent-4'"
                  class="mt-2 action-btn"
                  width="100%"
                  :disabled="loadingFile === fileName"
                >
                  <v-progress-circular
                    v-if="loadingFile === fileName"
                    indeterminate
                    size="20"
                    width="2"
                    color="white"
                    class="mr-2"
                  ></v-progress-circular>
                  {{ loadingFile === fileName ? 'Procesando...' : successFile === fileName ? '¡Completado!' : 'Resaltar IMEIs y Descargar PDF' }}
                </v-btn>
  
                <div class="justify-print">
                  <div v-if="fileName !== 'N/A'" class="qr-code-container small-qr">
                    <canvas :id="`qrcode-${fileName}`"></canvas>
                    <v-btn icon @click="printCard(fileName)" class="print-btn action-btn">
                      <v-icon size="x-large">mdi-printer</v-icon>
                    </v-btn>
                  </div>
                  <div v-if="fileName !== 'N/A'" class="observations">
                    <span class="observation">Escanee para descargar sus manifiestos resaltados</span>
                  </div>
                </div>
              </v-card-text>
            </v-card>
          </v-col>
        </v-row>
      </v-container>

      <!-- Modal Perfil -->
      <v-dialog v-model="profileModal" max-width="500px">
        <v-card>
          <v-card-title>Editar Perfil</v-card-title>
          <v-card-text>
            <v-form ref="profileForm" @submit.prevent="saveProfile" v-model="profileFormValid">
              <v-text-field
                v-model="profileUser.name"
                label="Nombre"
                variant="outlined"
                :rules="[v => !!v || 'El nombre es obligatorio']"
                required
              ></v-text-field>
              <v-text-field
                v-model="profileUser.email"
                label="Correo Electrónico"
                type="email"
                variant="outlined"
                :rules="[v => !!v || 'El correo electrónico es obligatorio']"
                readonly
                disabled
              ></v-text-field>
              <v-btn block color="primary" type="submit" :disabled="!profileFormValid">
                Guardar Cambios
              </v-btn>
            </v-form>
          </v-card-text>
        </v-card>
      </v-dialog>

    <!-- Modal Cambio de Contraseña -->
    <v-dialog v-model="passwordChangeModal" max-width="500px">
      <v-card>
        <v-card-title>Cambiar Contraseña</v-card-title>
        <v-card-text>
          <v-form ref="passwordForm" @submit.prevent="changePassword" v-model="passwordFormValid">
            <v-text-field
              v-model="passwordChange.currentPassword"
              label="Contraseña Actual"
              type="password"
              variant="outlined"
              :rules="[v => !!v || 'La contraseña actual es obligatoria']"
              required
            ></v-text-field>
            <v-text-field
              v-model="passwordChange.newPassword"
              label="Nueva Contraseña"
              type="password"
              variant="outlined"
              :rules="[
                v => !!v || 'La nueva contraseña es obligatoria',
                v => v.length >= 6 || 'La contraseña debe tener al menos 6 caracteres'
              ]"
              required
            ></v-text-field>
            <v-text-field
              v-model="passwordChange.confirmPassword"
              label="Confirmar Nueva Contraseña"
              type="password"
              variant="outlined"
              :rules="[
                v => !!v || 'Debe confirmar la nueva contraseña',
                v => v === passwordChange.newPassword || 'Las contraseñas no coinciden'
              ]"
              required
            ></v-text-field>
            <v-btn block color="primary" type="submit" :disabled="!passwordFormValid">
              Cambiar Contraseña
            </v-btn>
          </v-form>
        </v-card-text>
      </v-card>
    </v-dialog>
    </v-main>
    <!-- Botón flotante para imprimir/descargar PDF -->
    <v-btn v-if="results && Object.keys(results).length"
    fab
    bottom
    right
    color="grey-darken-4" 
    @click="printAllResults"
    class="floating-button"
    >
    <v-icon size="x-large">mdi-printer</v-icon>
    </v-btn>
  
  <!-- Botón Cierre de Sesión -->
    <v-btn @click="logout"
    top
    left
    color="grey-darken-4" 
    >
      Cerrar sesión
    </v-btn>

    <!-- Navegación inferior con botones para ir a la página de consulta y la de subida de archivos -->
    <v-bottom-navigation v-model="value" :bg-color="color" mode="shift" class="nav-bar">
      <!-- Botón Home -->
      <v-btn text @click="navigateTo('home')" v-if="loggedInUser.role === 'Administrador' || loggedInUser.role === 'Trabajador' || loggedInUser.role === 'Cliente'">
        <v-icon>mdi-barcode-scan</v-icon>
        <span>Consulta</span>
      </v-btn>
    
      <!-- Botón Upload (solo Administrador y Trabajador) -->
      <v-btn text @click="navigateTo('upload')" v-if="loggedInUser.role === 'Administrador' || loggedInUser.role === 'Trabajador'">
        <v-icon>mdi-file-upload</v-icon>
        <span>Archivos</span>
      </v-btn>
    
      <!-- Botón Usuarios (solo Administrador) -->
      <v-btn text @click="navigateTo('users')" v-if="loggedInUser.role === 'Administrador'">
        <v-icon>mdi-account-group</v-icon>
        <span>Usuarios</span>
      </v-btn>
    </v-bottom-navigation>
    
  </v-app>
  
</template>

<script setup lang="ts">
import { ref, nextTick, onMounted } from 'vue';
import { PDFDocument, rgb } from 'pdf-lib';
import * as pdfjsLib from 'pdfjs-dist';
import QRCode from 'qrcode';

// Configure PDF.js worker
pdfjsLib.GlobalWorkerOptions.workerSrc = `https://unpkg.com/pdfjs-dist@${pdfjsLib.version}/build/pdf.worker.min.mjs`;

// Types
interface FileResult {
  imei: string;
  name_pdf: string;
}

interface ProcessingState {
  loading: boolean;
  success: boolean;
  fileName: string | null;
}

// Constants
const IMEI_PATTERN = /\b\d{15}\b/g;
const HIGHLIGHT_COLOR = rgb(1, 1, 0); // Yellow
const HIGHLIGHT_OPACITY = 0.5;

// Composables
const processingState = ref<ProcessingState>({
  loading: false,
  success: false,
  fileName: null
});

// Utility Functions
const calculateTextWidth = (text: string, fontSize: number): number => {
  const scale = fontSize / 1000;
  const courierWidth = 600;
  return text.length * courierWidth * scale;
};

const findImeiInText = (text: string, imei: string): { start: number, end: number } | null => {
  const match = text.match(new RegExp(imei));
  if (!match) return null;
  return { start: match.index!, end: match.index! + imei.length };
};

const highlightImeiInPage = async (
  page: any, 
  imei: string, 
  pdfPage: any, 
  height: number
): Promise<boolean> => {
  const textContent = await page.getTextContent();
  let hasHighlightedImei = false;

  // Process text items line by line
  let currentLine = '';
  let currentItems = [];

  for (let i = 0; i < textContent.items.length; i++) {
    const item = textContent.items[i];
    currentLine += item.str;
    currentItems.push(item);

    // Check if we're at a line break or end of items
    const isLineBreak = i + 1 < textContent.items.length && 
      textContent.items[i + 1].transform[5] !== item.transform[5];
    const isLastItem = i === textContent.items.length - 1;

    if (isLineBreak || isLastItem) {
      // Check for IMEI in current line
      const match = findImeiInText(currentLine, imei);
      if (match) {
        // Calculate highlight position
        const item = currentItems[0];
        const x = item.transform[4];
        const y = height - item.transform[5] + 1;
        const matchWidth = calculateTextWidth(imei, item.transform[0]);

        // Draw highlight rectangle
        pdfPage.drawRectangle({
          x,
          y: height - y,
          width: matchWidth,
          height: item.transform[0],
          color: HIGHLIGHT_COLOR,
          opacity: HIGHLIGHT_OPACITY,
        });

        hasHighlightedImei = true;
      }

      // Check for split IMEI between lines
      if (i + 1 < textContent.items.length) {
        const nextItem = textContent.items[i + 1];
        const combinedText = currentLine + nextItem.str;
        const match = findImeiInText(combinedText, imei);
        
        if (match && match.start < currentLine.length && match.end > currentLine.length) {
          // Highlight first part
          const firstPartLength = currentLine.length - match.start;
          const firstItem = currentItems[currentItems.length - 1];
          const x1 = firstItem.transform[4];
          const y1 = height - firstItem.transform[5] + 1;
          const width1 = calculateTextWidth(imei.slice(0, firstPartLength), firstItem.transform[0]);

          pdfPage.drawRectangle({
            x: x1,
            y: height - y1,
            width: width1,
            height: firstItem.transform[0],
            color: HIGHLIGHT_COLOR,
            opacity: HIGHLIGHT_OPACITY,
          });

          // Highlight second part
          const x2 = nextItem.transform[4];
          const y2 = height - nextItem.transform[5] + 1;
          const width2 = calculateTextWidth(imei.slice(firstPartLength), nextItem.transform[0]);

          pdfPage.drawRectangle({
            x: x2,
            y: height - y2,
            width: width2,
            height: nextItem.transform[0],
            color: HIGHLIGHT_COLOR,
            opacity: HIGHLIGHT_OPACITY,
          });

          hasHighlightedImei = true;
        }
      }

      // Reset for next line
      currentLine = '';
      currentItems = [];
    }
  }

  return hasHighlightedImei;
};

// Main highlighting function
const highlightImeis = async (fileResults: FileResult[]) => {
  if (!fileResults.length) return;

  const pdfName = fileResults[0].name_pdf;
  processingState.value = { loading: true, success: false, fileName: pdfName };

  try {
    const imeis = fileResults.map(result => result.imei);
    const url = `/storage/uploads/${pdfName}`;
    
    // Load PDF
    const existingPdfBytes = await fetch(url).then(res => res.arrayBuffer());
    const pdfDoc = await PDFDocument.load(existingPdfBytes);
    const pdf = await pdfjsLib.getDocument(url).promise;

    // Process pages
    const pagesToKeep = new Set<number>();
    
    for (let i = 0; i < pdf.numPages; i++) {
      const page = await pdf.getPage(i + 1);
      const pdfPage = pdfDoc.getPages()[i];
      const { height } = pdfPage.getSize();

      // Check each IMEI
      for (const imei of imeis) {
        const hasHighlightedImei = await highlightImeiInPage(page, imei, pdfPage, height);
        if (hasHighlightedImei) {
          pagesToKeep.add(i);
        }
      }
    }

    // Create new PDF with highlighted pages
    const newPdfDoc = await PDFDocument.create();
    for (const pageIndex of pagesToKeep) {
      const [page] = await newPdfDoc.copyPages(pdfDoc, [pageIndex]);
      newPdfDoc.addPage(page);
    }

    // Save and download
    const newPdfBytes = await newPdfDoc.save();
    const blob = new Blob([newPdfBytes], { type: 'application/pdf' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `highlighted_${pdfName}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    processingState.value = { loading: false, success: true, fileName: pdfName };
    setTimeout(() => {
      processingState.value = { loading: false, success: false, fileName: null };
    }, 3000);

  } catch (error) {
    console.error('Error highlighting IMEIs:', error);
    processingState.value = { loading: false, success: false, fileName: null };
  }
};

// Expose the highlighting function
defineExpose({ highlightImeis });
</script>

<style scoped>
.fill-height {
  height: 100vh;
}
.share-buttons {
  display: flex;
  justify-content: space-around;
}
.not-found {
  background-color: #f8d7da;
  color: #721c24;
}
.qr-code-container {
  display: flex;
  justify-content: center;
  margin-top: 16px;
  position: relative;
}
.print-btn {
  position: absolute;
  bottom: -20px;
  right: 2px;
}
.observations {
  display: flex;
  justify-content: center;
  white-space: inherit;
}
.observation {
  font-size: xx-small;
  width: 160px;
  text-align: center;
}
.action-btn {
  display: inline-block;
}
.print-mode .action-btn {
  display: none;
}
.justify {
  display: grid;
  justify-content: left;
  margin-left: -10px;
}
.floating-button {
  position: fixed;
  bottom: 16px;
  right: 16px;
  z-index: 1005;
  height: 64px;
  border-radius: 32px;
}
.result-card {
  font-size: 0.85rem; /* Reduce el tamaño de la fuente en las tarjetas de resultados */
}

.small-qr canvas {
  width: 70px; /* Reduce el tamaño del QR */
  height: 70px; /* Reduce el tamaño del QR */
  display: block; /* Asegura que los QR ocupen espacio y se impriman correctamente */margin: auto;
}

.headline {
  font-size: 1.25rem; /* Reduce ligeramente el tamaño de la cabecera de la tarjeta */
}

@media (max-width: 600px) {
  .result-card {
    font-size: 0.75rem; /* Reduce más la fuente en pantallas pequeñas */
  }

  .small-qr canvas {
    width: 50px; /* Reduce más el tamaño del QR en pantallas pequeñas */
    height: 50px; /* Reduce más el tamaño del QR en pantallas pequeñas */
  }
}
.floating-user-btn {
  position: fixed;
  top: 16px;
  right: 16px;
  z-index: 1000;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  transition: all 0.3s ease;
  background-color: #674AEE !important;
  color: #ffffff !important;
}
.floating-user-btn:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 8px rgba(0,0,0,0.15);
}
.v-menu__content {
  border-radius: 12px !important;
  box-shadow: 0 8px 16px rgba(0,0,0,0.15) !important;
}

/* .nav-bar {
  bottom: 4px !important;
  left: 20% !important;
  width: calc(60% + 0px) !important;
  border-radius: 20px;
  opacity: 0.9;
} */

</style>